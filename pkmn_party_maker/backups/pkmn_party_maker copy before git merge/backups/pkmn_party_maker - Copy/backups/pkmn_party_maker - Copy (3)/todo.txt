----- SHORT TERM -----
- enter pkmn nicknames via teamedit or otherwise... and/or random nickanmes drawn from like list of popular fictional characters
	- lol @ having a random omanyte named thanos xD
- ensure no two pokemon from the same evo line i.e. no abra and kadabra
- rulesets
	- rules enforced by ruleset luke/ciaran/logan and i established - i.e. max evolution in chain, use best move, ensure at least one damaging move, no N/A moves like sleep talk w/o rest, etc
- pkmn edit allows editing any property like introducing an attr into pkmn's dict
- enter trainer name
- save output files
- search all todo's and pull to top of file anything thats impt
- when picking highest evolution, if it branches off (i.e. eevee or slowpoke), they get to pick... eevee makes a cool wild card 
	in that case kinda... tyrogue and other baby pkmn not banned picks in that case. ID "choices" by "evolution_tree" branches off 
	instead of just going up 1 level or w/e.
- det/ask who goes first among teams
- asserts, incl those in helper_functions... also test cases again :) 
- ensure any "artifacts" from stuff after gen 2 (i.e. fairy type) arent in data


----- LONG TERM ------
- crawling smogon builds
- could randomly generate pkmn then use pkhex's suggested moveset
- team balancing
	- type balancing i.e. no type repeated more than once or smt, minimizing weaknesses based on MU chart etc
		- pull travis's type_advantages.csv from https://github.com/travis4dams/fantasypokemon
		- might want to look at existing analyses of type matchups out there or how to approach teambuilding as an algorithm
- print cmd from pkmn dict function should iterate through ALL dict entries even those unrecognized
- pp ups seemed to be assumed
- calling team_make() more than once should append more teams not overwrite... is all that working properly?
- design - how to generate more balanced movesets/types... ideas travis had about prebuilt movesets... 
	- command prompt interface to include some of that
- generate teams for data analysis i.e. team comps stat averages and type adanvatages... gives a distribution for these things so i can start tuning/judging values, forming ideas about reasonable percentile thresholds for things, etc
- held items
- build dict of "superior moves" such that if a move a is strictly inferior to moves b,c, if b or c are also in that pokemon's learn set, remove a
	-		i.e. ember is strictly inferior to flame wheel and flamethrower... but it might be that b is not strictly inferior to c, so we might want both b and c as possible randomized moves


----- DEBUGGING/TESTING -----
- "evolves to" bug (see screenshots)
- jigglypuff typing (normal-normal instead of normal) and other strange corner cases you think might arise
- focus on the set of attributes actually needed for PkmnStad2 battles... then make sure all of that is tested properly
- test move set - seemed to be a lot of flagged moves. double checking this w/ serebii would be good... see chrome history for stuff about html request... i believe there was a builtin py3 lib
- w/e issue i thought might have caused dupe moves w/ travis - that perhaps its not the id is in their twice, but two diff ids/objs map to the same move or smt
- timing functions to narrow optimization... compare import times (import less libs?) to main algorithms
- double check values like stats and such w/ an outside source for additional confidence/validity
- generate teams over and over to see if any errors arise... catch them and save them all and save a lot of the team/algorithm state... there seemed to be some error interfacing with pokepy as if get_pkmn was calling a bad index or the arg to that wasnt an int or smt
- shuckle and others might fail move type req (one move of each type) i.e. shuckle may not have a bug move. perhaps only enforce this rule when its possible.


----- OPTIMIZATION -----
- efficiency, caching, test cases, etc
- revisit algorithms... consider, is there a faster way to get this? esp if we cache/store some stuff? am i recalc'ing smt repeatedly?
- revisit "low level" functions i.e. fetching the name from a pkmn obj... even getting that to be faster could streamline some stuff


----- MISC -----
- actively use github or other version control... branch of fantasypokemon w/ travis? idfk
- look into pokemon stadium online
- ***** folder import for batch editor on PkHex *****
- test gc on windows programs incl n64 emulator
- order more usb n64 controllers
- organize this todo list into short term vs long term... get organized in terms of meta design goals... revisit readme