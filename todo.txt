
"x---------x" means complete (x + 9 -'s + x)


----- SHORT-TERM -----

- random pkmn nicknames
	- enter pkmn nicknames via teamedit or otherwise... and/or random nickanmes drawn from like list of popular fictional characters
		- lol @ having a random omanyte named thanos xD

- ensure no two pokemon from the same evo line i.e. no abra and kadabra

- rulesets
	- rules enforced by ruleset luke/ciaran/logan and i established - i.e. max evolution in chain (remove baby's from banned RNG's in this case) use best move, ensure at least one damaging move, no N/A moves like sleep talk w/o rest, etc
		- this would mean undoing the ban i have on "sleep" moves like sleep talk, snore, etc

- new cmds 
	- pkmnshow(pkmn_ref)
		- displays dict of pkmn... also useful to list out prop names again
	- pkmnedit(pkmn_ref, prop_name, prop_val)
		- allows editing properties in dict, incl moves, and perhaps introducing an attr into pkmn's dict
	- teamreplace(team_ref, old_pkmn_ref, new_species_ref) 
		- replaces a specific pokemon with a newly built pokemon of the given species
	- teamrerandom(team_num) 
		- rerandoms that entire team
	- pkmnswap(pkmn_ref1, pkmn_ref2)
		- swaps two pokemon across teams

- rename cmds
	- teamedit --> pkmnrerandom

- rerunning team_make
	- in some parts of the code i may have written that we can just keep adding to the teams list, but i think ive changed my mind
	- for now i think the ideal behavior is to prompt the user "do you want to save the current teams before they are replaced"
	- later it might be useful to store a bunch of teams w/n the program instead of writing em out
	- previous note
		- calling team_make() more than once should append more teams not overwrite... is all that working properly?

- team order 
	- det/ask who is randomed first among teams

- enter player name

- enter trainer name

- enter pkmn nicknames

- track W/L stats for a player/pkmn

- save output files (done??)

- organize todo 
	- search all todo's and pull to top of file anything thats impt

- streamline evolution search
	- when picking highest evolution, if it branches off (i.e. eevee or slowpoke), they get to pick... eevee makes a cool wild card in that case kinda... 		tyrogue and other baby pkmn not banned picks in that case. ID "choices" by "evolution_tree" branches off instead of just going up 1 level or w/e.
	- speaking of which eevee's moveset is def wrong, belossom and other similar ones may similarly incorrectly include moves from evolutions at the same "depth" of three (those who branch off from a "common ancestor")

- remove anything after gen 2 from data
	- i.e. fairy type - currently typing is wrong for things like marill

- banned moves (done??)
	- prevent randoming a banned move (see txt file i made)

- moveset randomization time limit
	- timer on randomizing a moveset... if a moveset not generated in ~20 seconds, repick the pkmn... this is imo a fair temporary workaround to the problem 	of not being able to generate a moveset according to the ruleset 

- ban sleep moves (done??)
	- add sleep moves https://pokemondb.net/pokebase/261099/what-are-all-the-sleep-moves that i added to banned_moves.txt but didnt add to actual code variables

- prevent duplicates (fixed??)
	- script seems to allow two of same pkmn in each team

- teamload
	- teamload: load teams from file(s)
	- load a team from a cmd/str file into a dict

- enhance teamshow w/ stats
	- teamshow outputs some stats about the team (average health, # of pkmn of each type (showing most populated types first), etc, average move power, etc)

- ruleset design
	- which functions if any should be implemented by ruleset? if not, how to succinctly do control flow in "team_make" and similar functions so its not just a massive if/else structure?

(optional)
- sort movelist alphabetically or idfk maybe not it may just wanna be aligned with pkmn move slot

- more intuitive (1-based) numbering systems for commands... i.e. display team 1 and team 2 not 0/1... replace slots 1-6 not 0-5

- perhaps readjust input loop to be more inuitive? like you could do "teamedit 0 1" or maybe we want "team" then stuff/commands about team, then edit, then it says "ok what tema num" and then prompts for slot number...
	- also change output for team replace
	- make sure changes made in teamedit are consistent w/ ruleset

- consider undoing ban on charm/attract once genders done correctly... though these are also just terrible moves

- revisit iffy banned moves
	- double team is most controversial... minimize is also in there, i dont think any other
	- charm/attract



----- LONG-TERM ------

- team balancing
	- type balancing i.e. no type repeated more than once or smt, minimizing weaknesses based on MU chart etc
		- pull travis's type_advantages.csv from https://github.com/travis4dams/fantasypokemon
		- might want to look at existing analyses of type matchups out there or how to approach teambuilding as an algorithm
	- how to generate more balanced movesets/types... ideas travis had about prebuilt movesets... 
		- command prompt interface to include some of that

- smarter or "competitive" moveset generation
	- generating moves based on pokemon's role
	- assign roles to moves (buff, debuff, damage, stall, OHKO)	
	- "lite" machine learning stuff to determine good teams/movesets... i could call it ML But if i could just have a complex "Scoring" metric for teams that might also work similarly

- prebuilt movesets
	- ... or just tighter restrictions on movesets, and generate like 4-5 for each pkmn or something or maybe even more... generally algorithmically narrow in how to build a (aka what defines) good movesets i.e. type coverage, not too many status moves, move combos, etc.
		- these should be standalone for a given pkmn not considering others in a team... that kind of moveset building for entire team would be a part of a more robust teambuilder algorithm
	- i believe there was some script out there to modify a rom/save's rental pkmn... jff we could also do that, so if the script is lost the rentals in a ROM are better, BUT also allow selecting these and other pkmn thru interface
	- webcrawl smogon builds
	- use/fetch pkhex's suggested moveset	

- better source API
	- i feel pokepy has weird OOP design but maybe i havent inspected it thoroughly enough... or maybe their naming scheme is the only bad part but they captured the pkmn db well
	- does pkmn showdown have an API?

- dict_to_str
	- print cmd from pkmn dict function should iterate through ALL dict entries even those unrecognized

- pp 
	- currently pp ups seemed to be assumed by PkHex... do we want this?

- data analysis
	- generate teams for data analysis i.e. team comps stat averages and type adanvatages... gives a distribution for these things so i can start tuning/judging values, forming ideas about reasonable percentile thresholds for things, etc
	- use spare cpu time (aka when im sleeping) to generate movesets/pkmn and stuff like that... stuff that could save runtime later or just give data to analyze. 

- held items

- superior/inferior moves
	- build dict of "superior moves" such that if a move a is strictly inferior to moves b,c, if b or c are also in that pokemon's learn set, remove a
		-	i.e. ember is strictly inferior to flame wheel and flamethrower... but it might be that b is not strictly inferior to c, so we might want both b and c as possible randomized moves
	- an alternative to "use only superior moves" would be "do not allow inferior moves to exist in the same moveset as one with an inferior move"

- alternative playmodes
	- monotype battles
	- UU

- see pkmn wiki "trivia" for corner cases
	- esp stuff that says "this is the only pokemonm that..." for example gyarados cant learn any fly moves

- TM vs native moves
	- distinction between TM and native moves or w/e... things like rest and such common to all pkmn... could do probability to weigh these down or smt

- revist logan/ciaran/luke ruleset
	- with the ruleset logan/ciaran/luke and i drafted... do we really want to disallow movesets w/ no damaging attacks? supports/status inflicters could be legit.
		- ... yes, but as we random now, its hard to coordinate btwn pkmn, so having 1 damaging move (at least toxic) is a good rule of thumb... 
		- NOTE: (that remidns me) we may want to consider moves that (can) poison to be a damaging move

- "battle assistant" 
	- optionally read in live battle info and (further optionally) display tips like what types current pkmn is weak against

- selective video for PkS2
	- display only part of n64 screen when command showing up... or some other solution to this problem like having a wrapper whioch handling external inputs and shows current active pokemon to one player rather than both at the times it would normally be shown to the screen

- generalize beyond gen 2
	- NOTE: for debugging purposes, add one gen at a time, since many new features/edge cases can get added
	- NOTE: pay special attn to what features/changes happen btwn gens/versions w/n a gen... type MU changes, move changes, abilities intro'd, double/triple teams intro'd, physical/special split in gen 4, ev/iv changes, etc etc etc 

- user inputs type restrictions
	- things like "i want at least 2 water types" or "only these types" or "can't have X many bad MUs"... idk a lot of possibilities here if you get a good enough interpreter or way to input and implement the rules

- GUI
	- https://www.tutorialspoint.com/python/python_gui_programming

- "handicapping" 
	- aka team balancing based on recent wins
	- perhaps also nerfing pokemon based on their tier list ranking 
		- (this could be a really cool aspect to rebalancing the game and specific generations imo! perhaps simple yet effective)
	- a simple way to do this would be adjust EVs, IVs, and/or level
		- all effectively change the stats...
		- but there might be nuanced differences in the consequences on game mechanics 
			- (i.e. moves like Night Shade, moveset availability, Hidden Power, etc.)

... up to here in scraping git issues as of 8.8.19 10:14 pm...


----- DEBUGGING -----

AKA TESTING, CORNER CASES, CRASH HANDLING, etc

- testing
	- formal test cases for all functions

- known bugs
	- "evolves to" bug 
		- (see screenshots)	
	- jigglypuff typing 
		- (normal-normal instead of normal)
		- any other strange corner cases you think might arise?
	- dupe moves (temp workaround)
	- w/e issue i thought might have caused dupe moves w/ travis - that perhaps its not the id is in their twice, but two diff ids/objs map to the same move or smt
	- hidden power
		- typing is based on EV/IVs... if we are maxing these it'll always be dark. this is built into the engine so i dont see a way of having max EV/IV and HP w/ a diff type.
		- a workaround would be just reducing a pkmn's EV/IV's if they have HP... but this puts them at a disadvantage
		- the only workaround to THAT i can imagine is convoluted... smt like, if they dont have HP but have max ev/iv, mess w/ their stats in other ways so all have the same potential
		- alternatively could set the EV/IV of all non-hiddenpoweruser pkmn to that of the HP user... but what happens if there are 2 HP users?
	- moveset problems w/ (branching??) evolutions
		- eevee evolution movesets
			- seems to be inheriting movesets from all its evolution branches (i.e. umbreon rcv's espeon and all others)
		- i think there is a bug w/ pkmn like politoed and belossom b/c of branching evolutions
		- pkmn like weezing and dodrio dn seem to be retrieving prior evo moves correctly..?
		- might also be problems w/ pkmn that had a new evo added in gen 2 (i.e. bellossom)

- verify dataset
	- esp. movesets
		- seemed to be a lot of flagged moves in PkHex. double checking this w/ serebii would be good... see chrome history for stuff about html request... i believe there was a builtin py3 lib
	- double check values like stats and such w/ an outside source for additional confidence/validity

- stress tests
	- generate teams over and over to see if any errors arise... catch them and save them all and save a lot of the team/algorithm state... there seemed to be some error interfacing with pokepy as if get_pkmn was calling a bad index or the arg to that wasnt an int or smt

- syntax concerns
	- does "x not in y" or "not x in y" make a difference?

- assertd optimization
	- we want to avoid unnecessary calls to assertd when possible... its a small cost (overhead of calling function basically) but it can add up. often it just has to go at the start of a function and 
	- it may ultimately be better to do IF(DEBUG) {assert assert assert...} rather than a bunch of assertd's which all check debug and have function overhead
	- note any "if/else" statements that just do an assertd... if so, the "if" check should do if(DEBUG and ...) so we arent wasting time computing the other conditions in DEBUG = False mode


----- DESIGN -----

AKA OPTIMIZATION / PROGRAM DEVELOPMENT / CODING STYLE

- failed ruleset restrictions
	- shuckle and others might fail move type req (one move of each type) i.e. shuckle may not have a bug move. perhaps only enforce this rule when its possible.
	- generalize how the script handles pkmn that cant meet some aspect of a rule. if possible a rule could specify a function that is called when it cant be fulfilled.

- common debugging functions for checking function arguments/output
	- function for default bad input/output statement, showing its get_class_name and str

- RNG/probability concerns
	- excluding underevolved pkmn from rng is slightly different than randoming a number and if its in an evo tree select max evo... cause charmander line has like 3 entries in RNG set wheras if we ban earlier evos that line now has 1 entry in rng

- "background saves"
	- the program should hold copies of stuff the user may think they dont want saved... i.e. pokemon generated during back and forth rolls/rerolls... normally when team is first made it is saved, but a new replacement "pkmn x" comes in and isnt saved, then they replace that replkacement and its gone for good... if we want to ref pkmn x again we currently cant.

- for now focus on pokestad2
	- focus on the set of attributes actually needed for PkmnStad2 battles... then make sure all of that is tested properly

- code organization/cleanup
	- comments
	- funct order
	- file organization
	- consistent formatting
		- if(x) vs if x
		- whitespace btwn and w/n functs
	- asserts
		- incl those in helper_functions... also 
	- better var names
	- shorter solutions
	- better oop design, esp for pkmn wrapper stuff
		- generally distinguish between a class whose objects are represent a template or smt, versus a class whose objects represent specific instances
			- i.e. pokemon species vs pokemon obj... the Pokemon class i have rn is more akin to an individual, not the species
		- possible classes:
			- pkmn
			- move
			- evolution_tree
			- team
			- player
			- type

- runtime efficiency
	- caching
		- once a pokemon is loaded in get_pkmn() or something else retrieved in low-level funct, cache it if obj is not too large
	- time functions, store results in table... see if this is done nicely in pre-existing lib

- revisit algorithms
	- consider, is there a faster way to get this? esp if we cache/store some stuff? am i recalc'ing smt repeatedly?
	- esp focus on "low level" (aka constantly called) functions 
		- i.e. fetching the name from a pkmn obj... even getting that to be faster could streamline some stuff

- Python style
	- input handling
		- guide on how to handle inputs in Python style - https://stackoverflow.com/questions/19684434/best-way-to-check-function-arguments-in-python

- native search time complexity
	- for "if x in list_obj" native search by python... will it still be O(N) on sorted lists?

- optimizing rerandoms 
	- if possible, instead of rerolling the set, reroll the problematic element 
		- (i.e. "cant have sleep talk w/o rest"... so rerandom sleep talk not entire moveset)
	- see algorithms out there for the things im using rerandom around?

- alternate playmodes, esp those across the span of many games
	- i.e. gaining experience from battles and leveling up your pokemon across games
		- BUT keep in mind if winners gain more xp and a winner presumably has a skill advantange, leveling would widen the gap between and make it harder for the disadvantaged player to win... so a way around this might be to allow the disadvantaged player to get a new pkmn or repick the enemy's every so often or smt.

- NPC opponents ... simple AI
	- i.e. gym leaders, themed trainers, etc
	- baseline random move picker would at least allow competition against an AI, and serve as a proof of concept ... shouldnt be hard to simulate inputs to the emulator right? 

- get organized in terms of meta design goals... revisit readme

- use appropriate language in all things (except perhaps teams) 
	- some of this may be uploaded to public domains
	- we should perhaps just not upload any inappropriate team names we make in private

- design first, code second... 
	- or at least, be very careful in your initial coding decisions, and build from a good set of OOP principles so that debugging and testing/verification are streamlined. always make quick comments.

- style concerns
	- in general if you are viewing a new document/script, try to adhere to its style. 
	- i know my use of tabs and newlines is sometimes inconsistent, but here are some of my general rules... 
		- I add more space for readability, especially when there are a lot of comments or lines of code to teh function. some functions that i can keep under ~<15-20 lines i might keep single spaced with side-line comments. i generally avoid side-line comments, but an exception is quickly describing a line that initialies a variable.
	- on a related note, i prefer readability to "less lines of code"
		- i may have a few lines where each line just allocates a new variable (sometimes fetching from a list or w/e), and that's because calling a bunch of functions and indexing all in one line can make it so hard to read/understand, edit, comment, debug and so on.

- refactoring suggestions
	- ctrl+shift+f is your friend
	- careful renaming
		- whenever you rename a variable, make sure youve changed that variable name in that function context... saves a lot of debugging time catching it pre-emptively

x---------x organize this todo list into categories


----- MISC / UNORGANIZED / BRAINSTORM DUMP -----

- version control
	- actively use github or other version control... branch of fantasypokemon w/ travis? idfk

- look into pokemon stadium online

- what does the "folder import" do for batch editor on PkHex...?

- test GC controllers on Windows programs incl. n64 emulator

- order more usb n64 controllers

- mouse macro for pkhex inputs

- test create_pkmn() with dexnum 1-251
	- does this include all of hte moveset process and everything?

- diagraming out main algorithms i.e. team_make could be helpful

- does performance rely on disk much? in other words if the code/files were on a regular HD vs an SSD would it make much of a difference?

- do not allow 2 1HKO's or 2 of protect/detect or 2 of endure/whatever in the same moveset... stuff like this, where it would be redundant and bad

- update readmes

- clean code (i.e. asdf.py)

- add readmes to folders

- convert todo into git issues

- consider fully loading move/pokemon cache @ start of program. depends on how much this impacts start time obvs.

- have PkHex commands edit pokemon in party directly

- seadra should be kingdra

- alternate playmode - random a type, then choose a pokemon among that type; other player randoms another unselected type, chooses one among those; then keep going until both teams are built.

- add learnable_moves lists as attrtibutes to a pokemon when these have been initialized. or perhaps to a pokemon species class, or just a dict for now or something... that way if we edit a pokemons moves and want replacements, we dont have to regenerate its learnable moves and such

- is github project public or private?
